Node.js란?
- Node.js는 Chrome V8 javascript 엔진으로 빌드된 Javascript 런타임입니다. 
event-driven이라고 하는 Javascript 개발 형식과 non-blocking I/O 라고 하는 컴퓨터의 입출력을 처리하는 방식을 사용하고 있어, 가볍고 효율적인 장점을 가지고 있습니다.

Node.js 장점으로는 굉장히 속도가 좋은 V8엔진을 사용하기 때문에 성능이 좋고,
event-driven, non-blocking I/O 패러다임을 사용하기 때문에 이러한 것들이 적합한 경우에는 굉장히 적합한 퍼포먼스를 발휘하여 성능이 좋은 애플리케이션을 만들 수 있습니다.
front단과 server단에서 같은 언어를 사용함으로써 업무 효율성이 높아진다는 장점이 있습니다.

Node.js에서 제공하는 REPL은 윈도우의 cmd, 맥의 터미널 등에서 제공한다.
1. Read : 유저의 입력 값을 받아서 메모리에 저장
2. Eval : 입력 값의 평가, 실행
3. Print : Eval로 인해 반환된 값을 출력
4. Loop : 1 ~ 3 을 반복

위와 같이 REPL에서 개발을 하면 간단한 테스트 정도는 가능하지만 어플리케이션을 개발하는데는 적합하지 않습니다.
따로 자바스크립트 파일을 Node.js에서 제공하는 자바스크립트 런타임을 통해 실행이 가능하다.
따라서, REPL보다는 따로 스크립트 파일을 만들어서 그 스크립트 파일을 node.js, V8이 해석 후 실행하는 형태로 작업을 많이 합니다.

Javascript와 Node.js를 비교해보면 Javascript는 브라우저, 도큐먼트를 주로 다루고, node.js는 server를 주로 다룹니다. 즉 자바스크립트는 클라이언트에 대한 개발을 하는 것이고, node.js는 서버에 대한 개발을 하는 것입니다. node.js는 클라이언트를 다룰 수 없고, 자바스크립트는 서버를 다룰 수 없습니다. 차이점으로 Error 코드를 보시면 자바스크립트에서는 require라는 모듈이 지원되지 않기 때문에 error 메시지를 출력하고, document를 사용함으로서 error가 나지 않는 것을 확인할 수 있고, node.js는 require모듈이 있기 때문에 error메시지 출력이 나지 않지만 document 사용에서 error를 출력하는 것을 볼 수 있습니다. javascript와 node.js의 공통점은 ECMASCRIPT 사용한다는 것입니다.

다음은 node.js로 js파일 실행하기입니다. node.js를 사용하면 js파일을 바로 실행할 수 있습니다. 다음과 같이 console.log 명령어를 이용하여 hello.js를 구성했습니다. 여기서 console.log 명령은 터미널 창에 입력한 값을 보여주는 것입니다. 터미널에서 node hello.js를 실행하면 다음과 같이 출력값이 나오는 것을 볼 수 있습니다.

node.js로 http server를 구축하는 법 입니다. 옆에 코드는 node.js 공식 홈페이지에 서버를 구축하는 방법으로 나와 있는 코드입니다. 이 코드를 복사해서 스크립트 파일을 만든 후 
node명령을 통해 스크립트 파일을 실행시켜주면 3000번 포트에서 서버가 켜진 것을 볼 수 있습니다.

모듈이란 노드로 개발한 애플리케이션을 이루는 기본 조각입니다. 쉽게 말해서 부품, 모델이라고 생각하면 됩니다. 모듈의 종류로는 기본적으로 포함 되어있는 여부에 따라 기본모듈, 확장 모듈로 나뉘고, 모듈을 설치한 위치와 사용 가능 범위에 따라 범용 모듈과 복합 모듈로 나뉘며 C/C++로 구현되었는지, 자바스크립트로 구현되어있는지에 따라 C는 일반 모듈, 자바스크립트는 네이티브 모듈로 나뉩니다. 그리고 여러개의 파일이 하나의 모듈을 구성할 경우에는 복합 모듈로 나뉩니다.

npm은 node.js의 패키지 생태계로 세계에서 가장 큰 오픈 소스 라이브러리 생태계입니다. npm은 어떤 모듈을 설치, 삭제, 업그레이드, 의존성을 관리해주는 모듈입니다.
npm init은 npm상에서 현재 디렉토리를 패키지로 지정하는 명령입니다.
npm init 명령을 쳐 여러가지 명령에 답을 하면 package.json 파일을 작성합니다. 각 질문을 넘어가면 default값을 사용합니다.

npm 명령 중 대표적인 npm install 명령은 npm 모듈을 설치하는 방법입니다. npm install 패키지이름을 치면 이전에 npm init으로 생성된 package.json파일의 dependencies에 모듈이 추가됩니다. 옆의 사진은 npm 명령들을 모아 둔 것입니다.

콜백은 파라미터로 전달되는 함수를 콜백 함수로가 합니다. 콜백 함수는 함수가 실행되는 중간에 호출되어 상태 정보를 전달하거나 결과 값을 처리하는데 사용합니다. 쉽게 말해 무엇인가 일을 다른 객체에게 시키고, 그 일이 끝나는 것을 기다리는 것이 아니라 그 객체가 다시 부를 때까지 내 할일을 하고 있는 것입니다. 따라서, Non-Block 이며, 비동기 방식의 함수로 사용된다는 것을 알 수 있습니다. 콜백을 사용하지 않는 예제로 readfileSync라는 파일을 이용해 input.txt파일을 읽고 그 내용과 문자열 내용이 터미널에서 보여지는 것을 볼 수 있습니다. 다음 콜백을 사용하는 예제의 같은 readfile이지만 콜백함수를 넣어서 내용을 출력하고 문자열 내용을 마지막에 출력하는 모습입니다. 그러나 결과 값으로는 문자열이 먼저 찍히고 그 이후에 내용이 찍히는 것을 볼 수 있습니다. 그래서 콜백 함수를 사용할 때는 그 문장이 끝나지 않아도 뒤에 문장으로 넘어가는 것을 확인할 수 있습니다.

다음은 동기와 비동기입니다. 동기는 동기적으로 일을 처리한다고 하면, 어떤 일을 처리하고 그 일이 끝난 뒤에 다음 일을 수행하게 됩니다. 그리고 다음 일을 수행하고, 그 일이 끝난 뒤에 그 다음 일을 수행합니다. 만약 일을 처리하는데 굉장히 오래 걸리는 작업이 있다면 현재 수행중인 작업이 끝날 때 까지 다음 작업은 기다리게 됩니다.
비동기적으로 일을 처리한다고 하면, 지금 처리할 수 있는 일을 컴퓨터나 다른 사람에게 부여하고, 그 다음일을 수행하게 됩니다. 작업을 병렬로 처리하는 모습을 보입니다.

javascript에서 함수는 처리 방법들을 담고 있는 구문이면서, 그것 자체가 값이 될 수 있다.